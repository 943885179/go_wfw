// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/product/product.proto

package product

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
	dbmodel "qshapi/proto/dbmodel"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProductSrv service

type ProductSrvService interface {
	EditProduct(ctx context.Context, in *dbmodel.Product, opts ...client.CallOption) (*dbmodel.Id, error)
	DelProduct(ctx context.Context, in *dbmodel.Id, opts ...client.CallOption) (*dbmodel.Id, error)
	ProductList(ctx context.Context, in *ProductListReq, opts ...client.CallOption) (*dbmodel.PageResp, error)
	ProductById(ctx context.Context, in *dbmodel.Id, opts ...client.CallOption) (*dbmodel.Product, error)
	EditProductByIds(ctx context.Context, in *dbmodel.Ids, opts ...client.CallOption) (*empty.Empty, error)
	EditProductSku(ctx context.Context, in *dbmodel.ProductSku, opts ...client.CallOption) (*dbmodel.Id, error)
	DelProductSku(ctx context.Context, in *dbmodel.Id, opts ...client.CallOption) (*dbmodel.Id, error)
	ProductSkuById(ctx context.Context, in *dbmodel.Id, opts ...client.CallOption) (*dbmodel.ProductSku, error)
}

type productSrvService struct {
	c    client.Client
	name string
}

func NewProductSrvService(name string, c client.Client) ProductSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "product"
	}
	return &productSrvService{
		c:    c,
		name: name,
	}
}

func (c *productSrvService) EditProduct(ctx context.Context, in *dbmodel.Product, opts ...client.CallOption) (*dbmodel.Id, error) {
	req := c.c.NewRequest(c.name, "ProductSrv.EditProduct", in)
	out := new(dbmodel.Id)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSrvService) DelProduct(ctx context.Context, in *dbmodel.Id, opts ...client.CallOption) (*dbmodel.Id, error) {
	req := c.c.NewRequest(c.name, "ProductSrv.DelProduct", in)
	out := new(dbmodel.Id)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSrvService) ProductList(ctx context.Context, in *ProductListReq, opts ...client.CallOption) (*dbmodel.PageResp, error) {
	req := c.c.NewRequest(c.name, "ProductSrv.ProductList", in)
	out := new(dbmodel.PageResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSrvService) ProductById(ctx context.Context, in *dbmodel.Id, opts ...client.CallOption) (*dbmodel.Product, error) {
	req := c.c.NewRequest(c.name, "ProductSrv.ProductById", in)
	out := new(dbmodel.Product)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSrvService) EditProductByIds(ctx context.Context, in *dbmodel.Ids, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "ProductSrv.EditProductByIds", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSrvService) EditProductSku(ctx context.Context, in *dbmodel.ProductSku, opts ...client.CallOption) (*dbmodel.Id, error) {
	req := c.c.NewRequest(c.name, "ProductSrv.EditProductSku", in)
	out := new(dbmodel.Id)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSrvService) DelProductSku(ctx context.Context, in *dbmodel.Id, opts ...client.CallOption) (*dbmodel.Id, error) {
	req := c.c.NewRequest(c.name, "ProductSrv.DelProductSku", in)
	out := new(dbmodel.Id)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSrvService) ProductSkuById(ctx context.Context, in *dbmodel.Id, opts ...client.CallOption) (*dbmodel.ProductSku, error) {
	req := c.c.NewRequest(c.name, "ProductSrv.ProductSkuById", in)
	out := new(dbmodel.ProductSku)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductSrv service

type ProductSrvHandler interface {
	EditProduct(context.Context, *dbmodel.Product, *dbmodel.Id) error
	DelProduct(context.Context, *dbmodel.Id, *dbmodel.Id) error
	ProductList(context.Context, *ProductListReq, *dbmodel.PageResp) error
	ProductById(context.Context, *dbmodel.Id, *dbmodel.Product) error
	EditProductByIds(context.Context, *dbmodel.Ids, *empty.Empty) error
	EditProductSku(context.Context, *dbmodel.ProductSku, *dbmodel.Id) error
	DelProductSku(context.Context, *dbmodel.Id, *dbmodel.Id) error
	ProductSkuById(context.Context, *dbmodel.Id, *dbmodel.ProductSku) error
}

func RegisterProductSrvHandler(s server.Server, hdlr ProductSrvHandler, opts ...server.HandlerOption) error {
	type productSrv interface {
		EditProduct(ctx context.Context, in *dbmodel.Product, out *dbmodel.Id) error
		DelProduct(ctx context.Context, in *dbmodel.Id, out *dbmodel.Id) error
		ProductList(ctx context.Context, in *ProductListReq, out *dbmodel.PageResp) error
		ProductById(ctx context.Context, in *dbmodel.Id, out *dbmodel.Product) error
		EditProductByIds(ctx context.Context, in *dbmodel.Ids, out *empty.Empty) error
		EditProductSku(ctx context.Context, in *dbmodel.ProductSku, out *dbmodel.Id) error
		DelProductSku(ctx context.Context, in *dbmodel.Id, out *dbmodel.Id) error
		ProductSkuById(ctx context.Context, in *dbmodel.Id, out *dbmodel.ProductSku) error
	}
	type ProductSrv struct {
		productSrv
	}
	h := &productSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductSrv{h}, opts...))
}

type productSrvHandler struct {
	ProductSrvHandler
}

func (h *productSrvHandler) EditProduct(ctx context.Context, in *dbmodel.Product, out *dbmodel.Id) error {
	return h.ProductSrvHandler.EditProduct(ctx, in, out)
}

func (h *productSrvHandler) DelProduct(ctx context.Context, in *dbmodel.Id, out *dbmodel.Id) error {
	return h.ProductSrvHandler.DelProduct(ctx, in, out)
}

func (h *productSrvHandler) ProductList(ctx context.Context, in *ProductListReq, out *dbmodel.PageResp) error {
	return h.ProductSrvHandler.ProductList(ctx, in, out)
}

func (h *productSrvHandler) ProductById(ctx context.Context, in *dbmodel.Id, out *dbmodel.Product) error {
	return h.ProductSrvHandler.ProductById(ctx, in, out)
}

func (h *productSrvHandler) EditProductByIds(ctx context.Context, in *dbmodel.Ids, out *empty.Empty) error {
	return h.ProductSrvHandler.EditProductByIds(ctx, in, out)
}

func (h *productSrvHandler) EditProductSku(ctx context.Context, in *dbmodel.ProductSku, out *dbmodel.Id) error {
	return h.ProductSrvHandler.EditProductSku(ctx, in, out)
}

func (h *productSrvHandler) DelProductSku(ctx context.Context, in *dbmodel.Id, out *dbmodel.Id) error {
	return h.ProductSrvHandler.DelProductSku(ctx, in, out)
}

func (h *productSrvHandler) ProductSkuById(ctx context.Context, in *dbmodel.Id, out *dbmodel.ProductSku) error {
	return h.ProductSrvHandler.ProductSkuById(ctx, in, out)
}

// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/file/file.proto

package file

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	dbmodel "qshapi/proto/dbmodel"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FileSrv service

type FileSrvService interface {
	UploadFile(ctx context.Context, in *dbmodel.SysFile, opts ...client.CallOption) (*dbmodel.Id, error)
	GetFile(ctx context.Context, in *dbmodel.Id, opts ...client.CallOption) (*dbmodel.SysFile, error)
}

type fileSrvService struct {
	c    client.Client
	name string
}

func NewFileSrvService(name string, c client.Client) FileSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "file"
	}
	return &fileSrvService{
		c:    c,
		name: name,
	}
}

func (c *fileSrvService) UploadFile(ctx context.Context, in *dbmodel.SysFile, opts ...client.CallOption) (*dbmodel.Id, error) {
	req := c.c.NewRequest(c.name, "FileSrv.UploadFile", in)
	out := new(dbmodel.Id)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSrvService) GetFile(ctx context.Context, in *dbmodel.Id, opts ...client.CallOption) (*dbmodel.SysFile, error) {
	req := c.c.NewRequest(c.name, "FileSrv.GetFile", in)
	out := new(dbmodel.SysFile)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileSrv service

type FileSrvHandler interface {
	UploadFile(context.Context, *dbmodel.SysFile, *dbmodel.Id) error
	GetFile(context.Context, *dbmodel.Id, *dbmodel.SysFile) error
}

func RegisterFileSrvHandler(s server.Server, hdlr FileSrvHandler, opts ...server.HandlerOption) error {
	type fileSrv interface {
		UploadFile(ctx context.Context, in *dbmodel.SysFile, out *dbmodel.Id) error
		GetFile(ctx context.Context, in *dbmodel.Id, out *dbmodel.SysFile) error
	}
	type FileSrv struct {
		fileSrv
	}
	h := &fileSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&FileSrv{h}, opts...))
}

type fileSrvHandler struct {
	FileSrvHandler
}

func (h *fileSrvHandler) UploadFile(ctx context.Context, in *dbmodel.SysFile, out *dbmodel.Id) error {
	return h.FileSrvHandler.UploadFile(ctx, in, out)
}

func (h *fileSrvHandler) GetFile(ctx context.Context, in *dbmodel.Id, out *dbmodel.SysFile) error {
	return h.FileSrvHandler.GetFile(ctx, in, out)
}

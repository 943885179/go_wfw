// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/send/send.proto

package send

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SendSrv service

type SendSrvService interface {
	SendCode(ctx context.Context, in *SendCodeReq, opts ...client.CallOption) (*SendCodeResp, error)
	CodeVerify(ctx context.Context, in *CodeVerifyReq, opts ...client.CallOption) (*CodeVerifyResp, error)
	Send(ctx context.Context, in *SendReq, opts ...client.CallOption) (*empty.Empty, error)
	SendAll(ctx context.Context, in *SendAllReq, opts ...client.CallOption) (*empty.Empty, error)
}

type sendSrvService struct {
	c    client.Client
	name string
}

func NewSendSrvService(name string, c client.Client) SendSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "send"
	}
	return &sendSrvService{
		c:    c,
		name: name,
	}
}

func (c *sendSrvService) SendCode(ctx context.Context, in *SendCodeReq, opts ...client.CallOption) (*SendCodeResp, error) {
	req := c.c.NewRequest(c.name, "SendSrv.SendCode", in)
	out := new(SendCodeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendSrvService) CodeVerify(ctx context.Context, in *CodeVerifyReq, opts ...client.CallOption) (*CodeVerifyResp, error) {
	req := c.c.NewRequest(c.name, "SendSrv.CodeVerify", in)
	out := new(CodeVerifyResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendSrvService) Send(ctx context.Context, in *SendReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "SendSrv.Send", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendSrvService) SendAll(ctx context.Context, in *SendAllReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "SendSrv.SendAll", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SendSrv service

type SendSrvHandler interface {
	SendCode(context.Context, *SendCodeReq, *SendCodeResp) error
	CodeVerify(context.Context, *CodeVerifyReq, *CodeVerifyResp) error
	Send(context.Context, *SendReq, *empty.Empty) error
	SendAll(context.Context, *SendAllReq, *empty.Empty) error
}

func RegisterSendSrvHandler(s server.Server, hdlr SendSrvHandler, opts ...server.HandlerOption) error {
	type sendSrv interface {
		SendCode(ctx context.Context, in *SendCodeReq, out *SendCodeResp) error
		CodeVerify(ctx context.Context, in *CodeVerifyReq, out *CodeVerifyResp) error
		Send(ctx context.Context, in *SendReq, out *empty.Empty) error
		SendAll(ctx context.Context, in *SendAllReq, out *empty.Empty) error
	}
	type SendSrv struct {
		sendSrv
	}
	h := &sendSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&SendSrv{h}, opts...))
}

type sendSrvHandler struct {
	SendSrvHandler
}

func (h *sendSrvHandler) SendCode(ctx context.Context, in *SendCodeReq, out *SendCodeResp) error {
	return h.SendSrvHandler.SendCode(ctx, in, out)
}

func (h *sendSrvHandler) CodeVerify(ctx context.Context, in *CodeVerifyReq, out *CodeVerifyResp) error {
	return h.SendSrvHandler.CodeVerify(ctx, in, out)
}

func (h *sendSrvHandler) Send(ctx context.Context, in *SendReq, out *empty.Empty) error {
	return h.SendSrvHandler.Send(ctx, in, out)
}

func (h *sendSrvHandler) SendAll(ctx context.Context, in *SendAllReq, out *empty.Empty) error {
	return h.SendSrvHandler.SendAll(ctx, in, out)
}

// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sysuser.proto

package sysuser

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/any"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserSrv service

type UserSrvService interface {
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginResp, error)
	Registry(ctx context.Context, in *RegistryReq, opts ...client.CallOption) (*EditResp, error)
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...client.CallOption) (*EditResp, error)
	UserInfoList(ctx context.Context, in *UserInfoListReq, opts ...client.CallOption) (*PageResp, error)
	EditUser(ctx context.Context, in *SysUser, opts ...client.CallOption) (*EditResp, error)
	EditRole(ctx context.Context, in *SysRole, opts ...client.CallOption) (*EditResp, error)
	DelRole(ctx context.Context, in *DelReq, opts ...client.CallOption) (*EditResp, error)
	RoleList(ctx context.Context, in *PageReq, opts ...client.CallOption) (*PageResp, error)
	EditUserGroup(ctx context.Context, in *SysGroup, opts ...client.CallOption) (*EditResp, error)
	DelUserGroup(ctx context.Context, in *DelReq, opts ...client.CallOption) (*EditResp, error)
	UserGroupList(ctx context.Context, in *PageReq, opts ...client.CallOption) (*PageResp, error)
	EditMenu(ctx context.Context, in *SysMenu, opts ...client.CallOption) (*EditResp, error)
	DelMenu(ctx context.Context, in *DelReq, opts ...client.CallOption) (*EditResp, error)
	MenuList(ctx context.Context, in *PageReq, opts ...client.CallOption) (*PageResp, error)
	EditApi(ctx context.Context, in *SysApi, opts ...client.CallOption) (*EditResp, error)
	DelApi(ctx context.Context, in *DelReq, opts ...client.CallOption) (*EditResp, error)
	ApiList(ctx context.Context, in *PageReq, opts ...client.CallOption) (*PageResp, error)
	EditSrv(ctx context.Context, in *SysSrv, opts ...client.CallOption) (*EditResp, error)
	DelSrv(ctx context.Context, in *DelReq, opts ...client.CallOption) (*EditResp, error)
	SrvList(ctx context.Context, in *PageReq, opts ...client.CallOption) (*PageResp, error)
	EditTree(ctx context.Context, in *SysTree, opts ...client.CallOption) (*EditResp, error)
	DelTree(ctx context.Context, in *DelReq, opts ...client.CallOption) (*EditResp, error)
	TreeList(ctx context.Context, in *PageReq, opts ...client.CallOption) (*PageResp, error)
}

type userSrvService struct {
	c    client.Client
	name string
}

func NewUserSrvService(name string, c client.Client) UserSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "sysuser"
	}
	return &userSrvService{
		c:    c,
		name: name,
	}
}

func (c *userSrvService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.Login", in)
	out := new(LoginResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) Registry(ctx context.Context, in *RegistryReq, opts ...client.CallOption) (*EditResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.Registry", in)
	out := new(EditResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...client.CallOption) (*EditResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.ChangePassword", in)
	out := new(EditResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) UserInfoList(ctx context.Context, in *UserInfoListReq, opts ...client.CallOption) (*PageResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.UserInfoList", in)
	out := new(PageResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) EditUser(ctx context.Context, in *SysUser, opts ...client.CallOption) (*EditResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.EditUser", in)
	out := new(EditResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) EditRole(ctx context.Context, in *SysRole, opts ...client.CallOption) (*EditResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.EditRole", in)
	out := new(EditResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) DelRole(ctx context.Context, in *DelReq, opts ...client.CallOption) (*EditResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.DelRole", in)
	out := new(EditResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) RoleList(ctx context.Context, in *PageReq, opts ...client.CallOption) (*PageResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.RoleList", in)
	out := new(PageResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) EditUserGroup(ctx context.Context, in *SysGroup, opts ...client.CallOption) (*EditResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.EditUserGroup", in)
	out := new(EditResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) DelUserGroup(ctx context.Context, in *DelReq, opts ...client.CallOption) (*EditResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.DelUserGroup", in)
	out := new(EditResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) UserGroupList(ctx context.Context, in *PageReq, opts ...client.CallOption) (*PageResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.UserGroupList", in)
	out := new(PageResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) EditMenu(ctx context.Context, in *SysMenu, opts ...client.CallOption) (*EditResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.EditMenu", in)
	out := new(EditResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) DelMenu(ctx context.Context, in *DelReq, opts ...client.CallOption) (*EditResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.DelMenu", in)
	out := new(EditResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) MenuList(ctx context.Context, in *PageReq, opts ...client.CallOption) (*PageResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.MenuList", in)
	out := new(PageResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) EditApi(ctx context.Context, in *SysApi, opts ...client.CallOption) (*EditResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.EditApi", in)
	out := new(EditResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) DelApi(ctx context.Context, in *DelReq, opts ...client.CallOption) (*EditResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.DelApi", in)
	out := new(EditResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) ApiList(ctx context.Context, in *PageReq, opts ...client.CallOption) (*PageResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.ApiList", in)
	out := new(PageResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) EditSrv(ctx context.Context, in *SysSrv, opts ...client.CallOption) (*EditResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.EditSrv", in)
	out := new(EditResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) DelSrv(ctx context.Context, in *DelReq, opts ...client.CallOption) (*EditResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.DelSrv", in)
	out := new(EditResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) SrvList(ctx context.Context, in *PageReq, opts ...client.CallOption) (*PageResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.SrvList", in)
	out := new(PageResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) EditTree(ctx context.Context, in *SysTree, opts ...client.CallOption) (*EditResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.EditTree", in)
	out := new(EditResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) DelTree(ctx context.Context, in *DelReq, opts ...client.CallOption) (*EditResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.DelTree", in)
	out := new(EditResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) TreeList(ctx context.Context, in *PageReq, opts ...client.CallOption) (*PageResp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.TreeList", in)
	out := new(PageResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserSrv service

type UserSrvHandler interface {
	Login(context.Context, *LoginReq, *LoginResp) error
	Registry(context.Context, *RegistryReq, *EditResp) error
	ChangePassword(context.Context, *ChangePasswordReq, *EditResp) error
	UserInfoList(context.Context, *UserInfoListReq, *PageResp) error
	EditUser(context.Context, *SysUser, *EditResp) error
	EditRole(context.Context, *SysRole, *EditResp) error
	DelRole(context.Context, *DelReq, *EditResp) error
	RoleList(context.Context, *PageReq, *PageResp) error
	EditUserGroup(context.Context, *SysGroup, *EditResp) error
	DelUserGroup(context.Context, *DelReq, *EditResp) error
	UserGroupList(context.Context, *PageReq, *PageResp) error
	EditMenu(context.Context, *SysMenu, *EditResp) error
	DelMenu(context.Context, *DelReq, *EditResp) error
	MenuList(context.Context, *PageReq, *PageResp) error
	EditApi(context.Context, *SysApi, *EditResp) error
	DelApi(context.Context, *DelReq, *EditResp) error
	ApiList(context.Context, *PageReq, *PageResp) error
	EditSrv(context.Context, *SysSrv, *EditResp) error
	DelSrv(context.Context, *DelReq, *EditResp) error
	SrvList(context.Context, *PageReq, *PageResp) error
	EditTree(context.Context, *SysTree, *EditResp) error
	DelTree(context.Context, *DelReq, *EditResp) error
	TreeList(context.Context, *PageReq, *PageResp) error
}

func RegisterUserSrvHandler(s server.Server, hdlr UserSrvHandler, opts ...server.HandlerOption) error {
	type userSrv interface {
		Login(ctx context.Context, in *LoginReq, out *LoginResp) error
		Registry(ctx context.Context, in *RegistryReq, out *EditResp) error
		ChangePassword(ctx context.Context, in *ChangePasswordReq, out *EditResp) error
		UserInfoList(ctx context.Context, in *UserInfoListReq, out *PageResp) error
		EditUser(ctx context.Context, in *SysUser, out *EditResp) error
		EditRole(ctx context.Context, in *SysRole, out *EditResp) error
		DelRole(ctx context.Context, in *DelReq, out *EditResp) error
		RoleList(ctx context.Context, in *PageReq, out *PageResp) error
		EditUserGroup(ctx context.Context, in *SysGroup, out *EditResp) error
		DelUserGroup(ctx context.Context, in *DelReq, out *EditResp) error
		UserGroupList(ctx context.Context, in *PageReq, out *PageResp) error
		EditMenu(ctx context.Context, in *SysMenu, out *EditResp) error
		DelMenu(ctx context.Context, in *DelReq, out *EditResp) error
		MenuList(ctx context.Context, in *PageReq, out *PageResp) error
		EditApi(ctx context.Context, in *SysApi, out *EditResp) error
		DelApi(ctx context.Context, in *DelReq, out *EditResp) error
		ApiList(ctx context.Context, in *PageReq, out *PageResp) error
		EditSrv(ctx context.Context, in *SysSrv, out *EditResp) error
		DelSrv(ctx context.Context, in *DelReq, out *EditResp) error
		SrvList(ctx context.Context, in *PageReq, out *PageResp) error
		EditTree(ctx context.Context, in *SysTree, out *EditResp) error
		DelTree(ctx context.Context, in *DelReq, out *EditResp) error
		TreeList(ctx context.Context, in *PageReq, out *PageResp) error
	}
	type UserSrv struct {
		userSrv
	}
	h := &userSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&UserSrv{h}, opts...))
}

type userSrvHandler struct {
	UserSrvHandler
}

func (h *userSrvHandler) Login(ctx context.Context, in *LoginReq, out *LoginResp) error {
	return h.UserSrvHandler.Login(ctx, in, out)
}

func (h *userSrvHandler) Registry(ctx context.Context, in *RegistryReq, out *EditResp) error {
	return h.UserSrvHandler.Registry(ctx, in, out)
}

func (h *userSrvHandler) ChangePassword(ctx context.Context, in *ChangePasswordReq, out *EditResp) error {
	return h.UserSrvHandler.ChangePassword(ctx, in, out)
}

func (h *userSrvHandler) UserInfoList(ctx context.Context, in *UserInfoListReq, out *PageResp) error {
	return h.UserSrvHandler.UserInfoList(ctx, in, out)
}

func (h *userSrvHandler) EditUser(ctx context.Context, in *SysUser, out *EditResp) error {
	return h.UserSrvHandler.EditUser(ctx, in, out)
}

func (h *userSrvHandler) EditRole(ctx context.Context, in *SysRole, out *EditResp) error {
	return h.UserSrvHandler.EditRole(ctx, in, out)
}

func (h *userSrvHandler) DelRole(ctx context.Context, in *DelReq, out *EditResp) error {
	return h.UserSrvHandler.DelRole(ctx, in, out)
}

func (h *userSrvHandler) RoleList(ctx context.Context, in *PageReq, out *PageResp) error {
	return h.UserSrvHandler.RoleList(ctx, in, out)
}

func (h *userSrvHandler) EditUserGroup(ctx context.Context, in *SysGroup, out *EditResp) error {
	return h.UserSrvHandler.EditUserGroup(ctx, in, out)
}

func (h *userSrvHandler) DelUserGroup(ctx context.Context, in *DelReq, out *EditResp) error {
	return h.UserSrvHandler.DelUserGroup(ctx, in, out)
}

func (h *userSrvHandler) UserGroupList(ctx context.Context, in *PageReq, out *PageResp) error {
	return h.UserSrvHandler.UserGroupList(ctx, in, out)
}

func (h *userSrvHandler) EditMenu(ctx context.Context, in *SysMenu, out *EditResp) error {
	return h.UserSrvHandler.EditMenu(ctx, in, out)
}

func (h *userSrvHandler) DelMenu(ctx context.Context, in *DelReq, out *EditResp) error {
	return h.UserSrvHandler.DelMenu(ctx, in, out)
}

func (h *userSrvHandler) MenuList(ctx context.Context, in *PageReq, out *PageResp) error {
	return h.UserSrvHandler.MenuList(ctx, in, out)
}

func (h *userSrvHandler) EditApi(ctx context.Context, in *SysApi, out *EditResp) error {
	return h.UserSrvHandler.EditApi(ctx, in, out)
}

func (h *userSrvHandler) DelApi(ctx context.Context, in *DelReq, out *EditResp) error {
	return h.UserSrvHandler.DelApi(ctx, in, out)
}

func (h *userSrvHandler) ApiList(ctx context.Context, in *PageReq, out *PageResp) error {
	return h.UserSrvHandler.ApiList(ctx, in, out)
}

func (h *userSrvHandler) EditSrv(ctx context.Context, in *SysSrv, out *EditResp) error {
	return h.UserSrvHandler.EditSrv(ctx, in, out)
}

func (h *userSrvHandler) DelSrv(ctx context.Context, in *DelReq, out *EditResp) error {
	return h.UserSrvHandler.DelSrv(ctx, in, out)
}

func (h *userSrvHandler) SrvList(ctx context.Context, in *PageReq, out *PageResp) error {
	return h.UserSrvHandler.SrvList(ctx, in, out)
}

func (h *userSrvHandler) EditTree(ctx context.Context, in *SysTree, out *EditResp) error {
	return h.UserSrvHandler.EditTree(ctx, in, out)
}

func (h *userSrvHandler) DelTree(ctx context.Context, in *DelReq, out *EditResp) error {
	return h.UserSrvHandler.DelTree(ctx, in, out)
}

func (h *userSrvHandler) TreeList(ctx context.Context, in *PageReq, out *PageResp) error {
	return h.UserSrvHandler.TreeList(ctx, in, out)
}

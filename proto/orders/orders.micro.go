// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/orders/orders.proto

package orders

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	dbmodel "qshapi/proto/dbmodel"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OrderSrv service

type OrderSrvService interface {
	EditOrder(ctx context.Context, in *dbmodel.Orders, opts ...client.CallOption) (*dbmodel.Id, error)
	DelOrder(ctx context.Context, in *dbmodel.Id, opts ...client.CallOption) (*dbmodel.Id, error)
	OrderList(ctx context.Context, in *dbmodel.PageReq, opts ...client.CallOption) (*dbmodel.PageResp, error)
}

type orderSrvService struct {
	c    client.Client
	name string
}

func NewOrderSrvService(name string, c client.Client) OrderSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "orders"
	}
	return &orderSrvService{
		c:    c,
		name: name,
	}
}

func (c *orderSrvService) EditOrder(ctx context.Context, in *dbmodel.Orders, opts ...client.CallOption) (*dbmodel.Id, error) {
	req := c.c.NewRequest(c.name, "OrderSrv.EditOrder", in)
	out := new(dbmodel.Id)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSrvService) DelOrder(ctx context.Context, in *dbmodel.Id, opts ...client.CallOption) (*dbmodel.Id, error) {
	req := c.c.NewRequest(c.name, "OrderSrv.DelOrder", in)
	out := new(dbmodel.Id)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSrvService) OrderList(ctx context.Context, in *dbmodel.PageReq, opts ...client.CallOption) (*dbmodel.PageResp, error) {
	req := c.c.NewRequest(c.name, "OrderSrv.OrderList", in)
	out := new(dbmodel.PageResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderSrv service

type OrderSrvHandler interface {
	EditOrder(context.Context, *dbmodel.Orders, *dbmodel.Id) error
	DelOrder(context.Context, *dbmodel.Id, *dbmodel.Id) error
	OrderList(context.Context, *dbmodel.PageReq, *dbmodel.PageResp) error
}

func RegisterOrderSrvHandler(s server.Server, hdlr OrderSrvHandler, opts ...server.HandlerOption) error {
	type orderSrv interface {
		EditOrder(ctx context.Context, in *dbmodel.Orders, out *dbmodel.Id) error
		DelOrder(ctx context.Context, in *dbmodel.Id, out *dbmodel.Id) error
		OrderList(ctx context.Context, in *dbmodel.PageReq, out *dbmodel.PageResp) error
	}
	type OrderSrv struct {
		orderSrv
	}
	h := &orderSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderSrv{h}, opts...))
}

type orderSrvHandler struct {
	OrderSrvHandler
}

func (h *orderSrvHandler) EditOrder(ctx context.Context, in *dbmodel.Orders, out *dbmodel.Id) error {
	return h.OrderSrvHandler.EditOrder(ctx, in, out)
}

func (h *orderSrvHandler) DelOrder(ctx context.Context, in *dbmodel.Id, out *dbmodel.Id) error {
	return h.OrderSrvHandler.DelOrder(ctx, in, out)
}

func (h *orderSrvHandler) OrderList(ctx context.Context, in *dbmodel.PageReq, out *dbmodel.PageResp) error {
	return h.OrderSrvHandler.OrderList(ctx, in, out)
}
